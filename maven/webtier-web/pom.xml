<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <!--
        never change here for your local settings, properties can be overrided
        in settings.xml
    -->
    <properties>
        <artifact.id>${pvo.webtier.web.artifact.id}</artifact.id>

        <web.xml.file>../../conf/web/WEB-INF/web.xml</web.xml.file>
        <resource.dir>../../common/com/resourcebundle</resource.dir>
        <jsp.source.dir>jsp-source</jsp.source.dir>
        <html.temp.dir>target/htmlTemp</html.temp.dir>
        <this.directory>webtier-web</this.directory>

        <!--
            references the servletized jsps from apptier-web/target/jsp-source,
            since it utilizes the same jsps there is no need to servletize it
            again for this build
        -->
        <servletized.jsp.source.dir>apptier-web/target/jsp-source</servletized.jsp.source.dir>

        <tomcat.context.file.location>/opt/pvo/conf/tomcat/conf/Catalina/localhost/ROOT.xml</tomcat.context.file.location>


    </properties>

    <parent>
        <groupId>${pvo.group.id}</groupId>
        <artifactId>${pvo.parent.artifact.id}</artifactId>
        <version>${pvo.version}</version>
        <relativePath>../common/pom.xml</relativePath>
    </parent>

    <modelVersion>4.0.0</modelVersion>
    <artifactId>${artifact.id}</artifactId>
    <name>PVO-WEB</name>

    <packaging>war</packaging>

    <dependencies>

        <!--
            these are going into the war library, set scope to "compile" to
            include it in library
        -->

        <dependency>
            <groupId>${pvo.group.id}</groupId>
            <artifactId>${pvo.util.artifact.id}</artifactId>
            <version>${pvo.version}</version>
            <type>jar</type>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>${pvo.group.id}</groupId>
            <artifactId>${pvo.ejb.artifact.id}</artifactId>
            <version>${pvo.version}</version>
            <type>ejb</type>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>${pvo.group.id}</groupId>
            <artifactId>${pvo.invoker.artifact.id}</artifactId>
            <version>${pvo.version}</version>
            <type>jar</type>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>ajaxtags</groupId>
            <artifactId>ajaxtags</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>centinel</groupId>
            <artifactId>CentinelClient</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>oracle-jdbc</groupId>
            <artifactId>ojdbc6</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>ajaxtags</groupId>
            <artifactId>commons-beanutils</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>crystalreports</groupId>
            <artifactId>commons-collections</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>crystalreports</groupId>
            <artifactId>commons-configuration</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>crystalreports</groupId>
            <artifactId>commons-lang</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>crystalreports</groupId>
            <artifactId>commons-logging</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>crystalreports</groupId>
            <artifactId>commons-httpclient</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>crystalreports</groupId>
            <artifactId>Concurrent</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>crystalreports</groupId>
            <artifactId>CrystalCharting</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>crystalreports</groupId>
            <artifactId>CrystalCommon</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>crystalreports</groupId>
            <artifactId>CrystalContentModels</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>crystalreports</groupId>
            <artifactId>CrystalDatabaseConnectors</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>crystalreports</groupId>
            <artifactId>CrystalExporters</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>crystalreports</groupId>
            <artifactId>CrystalExportingBase</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>crystalreports</groupId>
            <artifactId>CrystalFormulas</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>crystalreports</groupId>
            <artifactId>CrystalQueryEngine</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>crystalreports</groupId>
            <artifactId>CrystalReportEngine</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>crystalreports</groupId>
            <artifactId>CrystalReportingCommon</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>crystalreports</groupId>
            <artifactId>icu4j</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>crystalreports</groupId>
            <artifactId>jrcadapter</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>crystalreports</groupId>
            <artifactId>jrcerom</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>crystalreports</groupId>
            <artifactId>keycodeDecoder</artifactId>
            <scope>compile</scope>
        </dependency>
        <!--
            this log4j artifact causes problems with jsp compilation, make it is
            runtime scope to prevent log4j from being imported into the compile
            classpath
        -->
        <dependency>
            <groupId>crystalreports</groupId>
            <artifactId>log4j</artifactId>
            <scope>compile</scope>
        </dependency>
            <!--
        <dependency>
            <groupId>crystalreports</groupId>
            <artifactId>MetafileRenderer</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>crystalreports</groupId>
            <artifactId>rasapp</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>crystalreports</groupId>
            <artifactId>rascore</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>crystalreports</groupId>
            <artifactId>ReportPrinter</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>crystalreports</groupId>
            <artifactId>rpoifs</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>crystalreports</groupId>
            <artifactId>serialization</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>crystalreports</groupId>
            <artifactId>URIUtil</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>crystalreports</groupId>
            <artifactId>webreporting</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>crystalreports</groupId>
            <artifactId>xml-apis</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>telamon</groupId>
            <artifactId>telalertj</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>arcot</groupId>
            <artifactId>XFMS</artifactId>
            <scope>compile</scope>
        </dependency>
            -->
        <dependency>
            <groupId>taglibs</groupId>
            <artifactId>jstl</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>taglibs</groupId>
            <artifactId>standard</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>taglibs</groupId>
            <artifactId>htmlcompressor</artifactId>
            <scope>compile</scope>
        </dependency>	
        <dependency>
            <groupId>taglibs</groupId>
            <artifactId>yuicompressor</artifactId>
            <scope>compile</scope>
        </dependency>		
        <dependency>
            <groupId>centinel</groupId>
            <artifactId>xmlParserAPIs</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>recaptcha</groupId>
            <artifactId>recaptcha4j</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>mlb</groupId>
            <artifactId>mlb</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>json</groupId>
            <artifactId>ezmorph</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>json</groupId>
            <artifactId>json-lib</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>ajaxtags</groupId>
            <artifactId>jericho-html</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>jdom</groupId>
            <artifactId>jdom</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>bokai</groupId>
            <artifactId>easybar</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>ajaxtags</groupId>
            <artifactId>displaytag</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>commons-fileupload</groupId>
            <artifactId>commons-fileupload</artifactId>
            <scope>compile</scope>
        </dependency>

            <!-- NEED TO REMOVE FOR JBOSS4 -->
        <dependency>
            <groupId>jboss</groupId>
            <artifactId>jboss-ha-legacy-client</artifactId>
            <scope>provided</scope>
        </dependency>
                <dependency>
                        <groupId>jboss</groupId>
                        <artifactId>jboss-ha-client</artifactId>
                        <scope>provided</scope>
                </dependency>
 

        <dependency>
            <groupId>jboss</groupId>
            <artifactId>jboss-security-spi</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>jboss</groupId>
            <artifactId>jbosssx</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>crystalreports</groupId>
            <artifactId>webreporting-jsf</artifactId>
            <scope>compile</scope>
        </dependency>
            
        <dependency>
            <groupId>ical</groupId>
            <artifactId>ical4j</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>ical</groupId>
            <artifactId>backport-util-concurrent</artifactId>
            <scope>compile</scope>
        </dependency>

                <dependency>
                        <groupId>spring</groupId>
                        <artifactId>org.springframework.aop</artifactId>
                        <scope>compile</scope>
                </dependency>

                <dependency>
                        <groupId>spring</groupId>
                        <artifactId>org.springframework.asm</artifactId>
                        <scope>compile</scope>
                </dependency>

                <dependency>
                        <groupId>spring</groupId>
                        <artifactId>org.springframework.aspects</artifactId>
                        <scope>compile</scope>
                </dependency>
                <dependency>
                        <groupId>spring</groupId>
                        <artifactId>org.springframework.beans</artifactId>
                        <scope>compile</scope>
                </dependency>
                <dependency>
                        <groupId>spring</groupId>
                        <artifactId>org.springframework.context.support</artifactId>
                        <scope>compile</scope>
                </dependency>
                <dependency>
                        <groupId>spring</groupId>
                        <artifactId>org.springframework.context</artifactId>
                        <scope>compile</scope>
                </dependency>
                <dependency>
                        <groupId>spring</groupId>
                        <artifactId>org.springframework.core</artifactId>
                        <scope>compile</scope>
                </dependency>
                <dependency>
                        <groupId>spring</groupId>
                        <artifactId>org.springframework.expression</artifactId>
                        <scope>compile</scope>
                </dependency>
                <dependency>
                        <groupId>spring</groupId>
                        <artifactId>org.springframework.instrument.tomcat</artifactId>
                        <scope>compile</scope>
                </dependency>
                <dependency>
                        <groupId>spring</groupId>
                        <artifactId>org.springframework.instrument</artifactId>
                        <scope>compile</scope>
                </dependency>
                <dependency>
                        <groupId>spring</groupId>
                        <artifactId>org.springframework.jdbc</artifactId>
                        <scope>compile</scope>
                </dependency>
                <dependency>
                        <groupId>spring</groupId>
                        <artifactId>org.springframework.jms</artifactId>
                        <scope>compile</scope>
                </dependency>
                <dependency>
                        <groupId>spring</groupId>
                        <artifactId>org.springframework.orm</artifactId>
                        <scope>compile</scope>
                </dependency>
                <dependency>
                        <groupId>spring</groupId>
                        <artifactId>org.springframework.oxm</artifactId>
                        <scope>compile</scope>
                </dependency>
                <dependency>
                        <groupId>spring</groupId>
                        <artifactId>org.springframework.test</artifactId>
                        <scope>compile</scope>
                </dependency>
                <dependency>
                        <groupId>spring</groupId>
                        <artifactId>org.springframework.transaction</artifactId>
                        <scope>compile</scope>
                </dependency>
                <dependency>
                        <groupId>spring</groupId>
                        <artifactId>org.springframework.web.portlet</artifactId>
                        <scope>compile</scope>
                </dependency>
                <dependency>
                        <groupId>spring</groupId>
                        <artifactId>org.springframework.web.servlet</artifactId>
                        <scope>compile</scope>
                </dependency>
                <dependency>
                        <groupId>spring</groupId>
                        <artifactId>org.springframework.web.struts</artifactId>
                        <scope>compile</scope>
                </dependency>
                <dependency>
                        <groupId>spring</groupId>
                        <artifactId>org.springframework.web</artifactId>
                        <scope>compile</scope>
                </dependency>
                
                <dependency>
                        <groupId>barcode</groupId>
                        <artifactId>rbarcode</artifactId>
                        <scope>compile</scope>
                </dependency>                

                <dependency>
                        <groupId>barcode</groupId>
                        <artifactId>qrcode</artifactId>
                        <scope>compile</scope>
                </dependency> 

                <dependency>
                        <groupId>barcode</groupId>
                        <artifactId>pngencoder</artifactId>
                        <scope>compile</scope>
                </dependency> 
				<dependency>
                  <groupId>bouncycastle</groupId>
                  <artifactId>bcprov-jdk15on</artifactId>
                  <scope>compile</scope>
                </dependency>
                <dependency>
                  <groupId>bouncycastle</groupId>
                  <artifactId>bcpkix-jdk15on</artifactId>
                  <scope>compile</scope>
                </dependency>
                <dependency>
                  <groupId>bouncycastle</groupId>
                  <artifactId>bcmail-jdk15on</artifactId>
                  <scope>compile</scope>
                </dependency>
                <dependency>
                  <groupId>commons-codec</groupId>
                  <artifactId>commons-codec</artifactId>
                  <scope>compile</scope>
                </dependency>
                
        <!-- just used for compiling -->
        <dependency>
            <groupId>org.codehaus.mojo.jspc</groupId>
            <artifactId>jspc-compiler-tomcat6</artifactId>
            <version>2.0-alpha-3</version>
            <scope>provided</scope>
        </dependency>

        <!-- used to run the tomcat deploy plugin -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>servlet-api</artifactId>
            <version>2.5</version>
            <scope>provided</scope>
        </dependency>

			<!-- JAX-RS and Apache CXF jars -->
			<dependency>
				<groupId>apache-cxf</groupId>
				<artifactId>cxf</artifactId>
				<scope>compile</scope>				
			</dependency>
			<dependency>
				<groupId>apache-cxf</groupId>
				<artifactId>javax.ws.rs-api</artifactId>
				<scope>compile</scope>				
			</dependency>
			<dependency>
				<groupId>apache-cxf</groupId>
				<artifactId>jaxb-impl</artifactId>
				<scope>compile</scope>				
			</dependency>
			<dependency>
				<groupId>apache-cxf</groupId>
				<artifactId>jettison</artifactId>
				<scope>compile</scope>				
			</dependency>
			<dependency>
				<groupId>apache-cxf</groupId>
				<artifactId>neethi</artifactId>
				<scope>compile</scope>				
			</dependency>
			<dependency>
				<groupId>apache-cxf</groupId>
				<artifactId>wsdl4j</artifactId>
				<scope>compile</scope>				
			</dependency>	
			<dependency>
				<groupId>apache-cxf</groupId>
				<artifactId>xmlschema-core</artifactId>
				<scope>compile</scope>
			</dependency>	
			
			<!-- Jackson (json parsing) -->
			<dependency>
				<groupId>org.codehaus.jackson</groupId>
				<artifactId>jackson-core-asl</artifactId>
				<scope>compile</scope>
			</dependency>

			<dependency>
				<groupId>org.codehaus.jackson</groupId>
				<artifactId>jackson-mapper-asl</artifactId>
				<scope>compile</scope>
			</dependency>

            <!-- Social Twitter Integration -->
            <dependency>
                <groupId>org.twitter4j</groupId>
                <artifactId>twitter4j-core</artifactId>
                <scope>compile</scope>
            </dependency>

    </dependencies>

    <build>

        <resources>
            <resource>
                <directory>${resource.dir}</directory>
                <includes>
                    <include>**/*.properties</include>
                </includes>
            </resource>
        </resources>


        <plugins>

            <!--
                fiter JSP files with VERSION token in them, inject pvo version into
                the file and store in a temporary directory to be JSP compiled and
                included in WAR later
            -->
            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>generate-jsp-version</id>
                        <phase>initialize</phase>
                        <configuration>
                            <tasks>
                                <filter token="FULL_VERSION" value="${pvo.version}" />
                                <filter token="VERSION" value="${pvo.version}" />
                                <copy todir="${html.temp.dir}" filtering="true" overwrite="true">
                                    <fileset dir="../${html.dir}">
                                        <include name="util/PVOCurrentVersion.jsp" />
                                        <include name="mlb/TeamFooter.jsp" />
                                    </fileset>
                                </copy>
                            </tasks>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!--
                Servletize the JSPs and append to the web.xml servlet path. We don't
                want this plugin to compile our JSPs because this plugin does not
                allow exclusions, so we have the maven java compiler do that for us
                later. There's two executions here: 1) Servletize the JSPs with the
                version inside them 2) Servletize the JSPS in the public_html
                folder, does not override #1.
            -->
            <plugin>
                <groupId>org.codehaus.mojo.jspc</groupId>
                <artifactId>jspc-maven-plugin</artifactId>
                <configuration>
                    <compile>false</compile>
                    <verbose>1</verbose>
                    <packageName>org.apache.jsp</packageName>
                    <inputWebXml>${web.xml.file}</inputWebXml>
                    <injectString>&lt;!-- [INSERT FRAGMENT HERE] --&gt;</injectString>
                    <workingDirectory>${servletized.jsp.source.dir}</workingDirectory>
                    <!--  
                    	Ashvin: 03/16/2011
                    	QC 9796 -  We need to keep the spaces, by default trimSpaces parameter value is true, so setting it to false. 
                    -->
                    <trimSpaces>false</trimSpaces>  
                </configuration>

                <executions>
                    <execution>
                        <id>servletize-jspc-version-files</id>
                        <configuration>
                            <sources>
                                <directory>${this.directory}/${html.temp.dir}</directory>
                            </sources>
                        </configuration>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>servletize-jspc-files</id>
                        <phase>generate-sources</phase>
                        <configuration>
                            <sources>
                                <directory>${html.dir}</directory>
                            </sources>
                        </configuration>
                        <goals>
                            <goal>compile</goal>
                        </goals>
                    </execution>
                </executions>

                <dependencies>
                    <dependency>
                        <groupId>org.codehaus.mojo.jspc</groupId>
                        <artifactId>jspc-compiler-tomcat6</artifactId>
                        <version>2.0-alpha-3</version>
                    </dependency>
                </dependencies>

            </plugin>

            <!--
                add the folder jsp-source into our the compiler's path for
                compilation before packaging the war
            -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>add-jsp-source</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>${servletized.jsp.source.dir}</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>


            <!--
                Compiles java and the servletized JSPs before the "package" phase.
                First compile all JSPS, then compile specified java code. NOTE: KEEP
                THESE EXLCUDES IN SYNC WITH the "apptier-web'
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>

                    <excludes>
                        <!--
                            these files are statically imported by another JSP file and is
                            most likely jsp fragment
                        -->
                        <!-- therefore, we can ignore compiling them individually -->
                        <exclude>**/kiosk/EndPage_jsp.java</exclude>
                        <exclude>**/kiosk/PageFooter_jsp.java</exclude>
                        <exclude>**/kiosk/StartPage_jsp.java</exclude>
                        <exclude>**/maint/newMaintFooter_jsp.java</exclude>
                        <exclude>**/maint/newMaintHeader_jsp.java</exclude>
                        <exclude>**/maint/PerfGroup/PerfGroupFields_jsp.java</exclude>
                        <exclude>**/maint/PerfGroup/PerfGroupInfo_jsp.java</exclude>
                        <exclude>**/maint/SessionFields_jsp.java</exclude>
                        <exclude>**/maint/SessionInfo_jsp.java</exclude>
                        <exclude>**/maint/SupplierVenueXref/SupplierVenueFields_jsp.java
                                </exclude>
                        <exclude>**/maint/SupplierVenueXref/SupplierVenueInfo_jsp.java
                                </exclude>

                        <!-- this page references a method that does not exist -->
                        <!-- iWillCallOrder .setPerfDescList() and getPerfDescList(). -->
                        <exclude>**/kiosk/WCOrderDisplaySummary_jsp.java</exclude>

                        <exclude>**/maint/PerfDisplay_jsp.java</exclude>
                        <exclude>**/maint/PerfSelect_jsp.java</exclude>
                        <exclude>**/maint/RestrictionDisplayEdit_jsp.java</exclude>
                        <exclude>**/maint/SupplierMaintTextEdit_jsp.java</exclude>
                        <exclude>**/maint/TicketPrinterStockChange_jsp.java</exclude>
                        <exclude>**/maint/newMaintMenu_jsp.java</exclude>

                        <exclude>**/privatelabel/wdpro/CheckoutPayment_jsp.java
                                </exclude>
                        <exclude>**/privatelabel/wdpro/ConfirmOrder_jsp.java</exclude>

                        <exclude>**/encore/CustomPage_jsp.java</exclude>
                        <exclude>**/excite/PageHeader_jsp.java</exclude>

                        <exclude>**/reports/ReportDef_jsp.java</exclude>
                        <exclude>**/reports/ReportDefEdit_jsp.java</exclude>
                        <exclude>**/reports/ReportDefList_jsp.java</exclude>
                        <exclude>**/reports/Table_jsp.java</exclude>
                        <exclude>**/reports/TableEdit_jsp.java</exclude>
                        <exclude>**/reports/Thread_jsp.java</exclude>
                        <exclude>**/reports/ThreadEdit_jsp.java</exclude>
                        <exclude>**/reports/ThreadList_jsp.java</exclude>

                        <!--
                            out of sync with ProtectedOnsaleUtil change made on -r 62418,
                            (PVO1064)
                        -->
                        <exclude>**/protected_005fonsale_jsp.java</exclude>
                    </excludes>

                    <!--
                        This includes everything excluded in pvo-util.jar, so we compile
                        everything else missing from pvo-util.jar. Not sure if this is
                        necessary but we are not sure if we are going to break something
                        if we don't (conversion from Maven 1).
                    -->
                    <includes>
                        <!--include jsp servlets to compile -->
                        <include>org/apache/jsp/**</include>
                        
                        <include>**/TestClient.java</include>
                        <include>**/TestManagedQueueThread.java</include>
                        <include>com/tickets/util/mail/ejbgen/*</include>
                        <include>com/tickets/util/bootstrap/jboss/*</include>
                        <include>org/jboss/invocation/**</include>
                    </includes>

                </configuration>

            </plugin>


            <!--
                specify custom war directories, this plugin is overrided for
                development profiles (look below)
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <configuration>
                    <warSourceDirectory>../${html.dir}</warSourceDirectory>
                    <warSourceExcludes>**/makefile,**/WEB-INF/*,**/*.html,**/*.jsp,**/*.inc
                    </warSourceExcludes>
                    <!--
                        This file is generated by the jsp-maven-plugin, that plugin
                        essentially merges the web.xml file with the servletized jsp
                        paths. In the war packaging phase, it moves the jspweb.xml into
                        the WEB-INF as the new web.xml
                    -->
                    <webXml>target/jspweb.xml</webXml>

                </configuration>
            </plugin>


        </plugins>

    </build>


    <profiles>
        <!--
            development profile overrides war plugin and does an automated tomcat
            deploy
        -->
        <profile>
            <id>profile-dev</id>
            <build>
                <plugins>

                    <!--
                        For dev, we don't merge the web.xml with the servletized jsp paths
                        in the generated jspweb.xml. This allows us to run the "jsponly"
                        command to dynamically change JSPs during development.
                    -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-war-plugin</artifactId>
                        <configuration>
                            <warSourceDirectory>../${html.dir}</warSourceDirectory>
                            <warSourceExcludes>**/makefile,**/WEB-INF/*,**/*.html
                            </warSourceExcludes>
                            <webXml>${web.xml.file}</webXml>
                            <webResources>
                                <resource>
                                    <!-- jsp files with versions in them -->
                                    <directory>${this.directory}/${html.temp.dir}</directory>
                                </resource>
                            </webResources>
                        </configuration>
                    </plugin>

                    <!--
                        Deploy the context.xml as the ROOT.xml in the Tomcat Catalina
                        localhost directory. The context.xml changes the docbase dictory
                        to this maven build directory, this allows us to tell Tomcat to
                        load the war that maven built without having to copy it over to
                        the webapps directory. There is no hotdeploy here as it doesn't
                        work with this application.
                    -->
                    <plugin>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>depoy-tomcat-context</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>                                
                                <configuration>
                                   <tasks>
                                     <!-- linux context -->
                                     <copy file="context.xml" tofile="${tomcat.context.file.location}" overwrite="true" />
                                     <!-- windows context, this file should never be committed to repository, create this yourself -->
                                     <copy file="win_context.xml" tofile="${tomcat.context.file.location}" overwrite="true" failonerror="false"/>
                                   </tasks>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <!--
                        NOTE: NOT USED because tomcat hot-deploying this war doesn't work
                        correctly anyhow. This plugin tells Tomcat to look in the
                        context.xml path to find the war that was built. If we use
                        'context' mode we don't have to upload the war to Tomcat, we just
                        tell the manager where our war is built and it will run it
                        automatically. <plugin> <groupId>org.codehaus.mojo</groupId>
                        <artifactId>tomcat-maven-plugin</artifactId>
                        <version>1.0</version> <configuration>
                        <url>${tomcat.manager.url}</url>
                        <username>${tomcat.manager.user}</username>
                        <password>${tomcat.manager.password}</password> <path>/</path>
                        <update>true</update> <contextFile>context.xml</contextFile>
                        <mode>context</mode> </configuration> <executions> <execution>
                        <id>deploy-to-tomcat</id> <phase>package</phase> <goals>
                        <goal>inplace</goal> </goals> </execution> </executions> </plugin>
                    -->

                </plugins>
            </build>
        </profile>

    </profiles>

</project>
